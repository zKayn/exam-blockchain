// backend/utils/blockchain-simulator.js - TH√äM C√ÅC FUNCTIONS THI·∫æU
const crypto = require('crypto');
const fs = require('fs');
const path = require('path');

// T·∫°o ƒë∆∞·ªùng d·∫´n ƒë·∫øn file l∆∞u tr·ªØ blockchain
const BLOCKCHAIN_FILE = path.join(__dirname, '../data/blockchain.json');
const BLOCKCHAIN_BACKUP_DIR = path.join(__dirname, '../data/backups');

// EMERGENCY: ƒê·∫£m b·∫£o th∆∞ m·ª•c v√† file t·ªìn t·∫°i
function ensureBlockchainFile() {
  try {
    // T·∫°o th∆∞ m·ª•c data n·∫øu ch∆∞a c√≥
    if (!fs.existsSync(path.dirname(BLOCKCHAIN_FILE))) {
      fs.mkdirSync(path.dirname(BLOCKCHAIN_FILE), { recursive: true });
      console.log('‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c data');
    }

    // T·∫°o th∆∞ m·ª•c backup n·∫øu ch∆∞a c√≥
    if (!fs.existsSync(BLOCKCHAIN_BACKUP_DIR)) {
      fs.mkdirSync(BLOCKCHAIN_BACKUP_DIR, { recursive: true });
      console.log('‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c backups');
    }

    // Ki·ªÉm tra file blockchain
    if (!fs.existsSync(BLOCKCHAIN_FILE)) {
      const initialData = {
        chain: [],
        metadata: {
          version: '1.0.0',
          created: new Date().toISOString(),
          lastModified: new Date().toISOString()
        }
      };
      fs.writeFileSync(BLOCKCHAIN_FILE, JSON.stringify(initialData, null, 2));
      console.log('‚úÖ ƒê√£ t·∫°o file blockchain m·ªõi');
    }

    return true;
  } catch (error) {
    console.error('‚ùå L·ªói t·∫°o file blockchain:', error);
    return false;
  }
}

// ƒê·ªçc blockchain an to√†n
function readBlockchain() {
  try {
    // ƒê·∫£m b·∫£o file t·ªìn t·∫°i
    ensureBlockchainFile();
    
    const data = fs.readFileSync(BLOCKCHAIN_FILE, 'utf8');
    const blockchain = JSON.parse(data);
    
    // ƒê·∫£m b·∫£o c·∫•u tr√∫c ƒë√∫ng
    if (!blockchain.chain) {
      blockchain.chain = [];
    }
    if (!blockchain.metadata) {
      blockchain.metadata = {
        version: '1.0.0',
        created: new Date().toISOString(),
        lastModified: new Date().toISOString()
      };
    }
    
    return blockchain;
  } catch (error) {
    console.error('‚ùå L·ªói ƒë·ªçc blockchain, t·∫°o m·ªõi:', error);
    
    // T·∫°o blockchain m·ªõi n·∫øu c√≥ l·ªói
    const newBlockchain = { 
      chain: [],
      metadata: {
        version: '1.0.0',
        created: new Date().toISOString(),
        lastModified: new Date().toISOString()
      }
    };
    
    try {
      fs.writeFileSync(BLOCKCHAIN_FILE, JSON.stringify(newBlockchain, null, 2));
      console.log('‚úÖ ƒê√£ t·∫°o blockchain m·ªõi');
    } catch (writeError) {
      console.error('‚ùå Kh√¥ng th·ªÉ t·∫°o blockchain m·ªõi:', writeError);
    }
    
    return newBlockchain;
  }
}

// H√†m t√≠nh hash c·ªßa block
function calculateHash(data, previousHash, timestamp) {
  return crypto.createHash('sha256')
    .update(previousHash + JSON.stringify(data) + timestamp)
    .digest('hex');
}

// Ghi blockchain an to√†n
function writeBlockchain(blockchain) {
  try {
    // ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
    ensureBlockchainFile();
    
    // C·∫≠p nh·∫≠t metadata
    blockchain.metadata = blockchain.metadata || {};
    blockchain.metadata.lastModified = new Date().toISOString();
    blockchain.metadata.totalBlocks = blockchain.chain.length;
    
    fs.writeFileSync(BLOCKCHAIN_FILE, JSON.stringify(blockchain, null, 2));
    console.log('‚úÖ Ghi blockchain th√†nh c√¥ng');
    return true;
  } catch (error) {
    console.error('‚ùå L·ªói ghi blockchain:', error);
    return false;
  }
}

// H√†m n·ªôp b√†i l√™n blockchain 
async function submitExamToBlockchain(submissionId, studentId, examId, answers, correctAnswers, totalQuestions, score) {
  try {
    console.log(`üìù L∆∞u k·∫øt qu·∫£ l√™n blockchain: ${submissionId}`);
    
    // ƒê·ªçc blockchain hi·ªán t·∫°i
    const blockchain = readBlockchain();
    
    // L·∫•y hash c·ªßa block cu·ªëi c√πng
    const previousHash = blockchain.chain.length > 0 
      ? blockchain.chain[blockchain.chain.length - 1].hash 
      : '0';
    
    // T·∫°o timestamp
    const timestamp = new Date().toISOString();
    
    // T·∫°o block m·ªõi v·ªõi d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß
    const data = {
      submissionId,
      studentId,
      examId,
      answers,
      correctAnswers: Number(correctAnswers),
      totalQuestions: Number(totalQuestions),
      score: Number(score).toFixed(2),
      percentage: ((correctAnswers / totalQuestions) * 100).toFixed(2),
      timestamp
    };
    
    // T√≠nh hash c·ªßa block
    const hash = calculateHash(data, previousHash, timestamp);
    
    // T·∫°o block m·ªõi
    const newBlock = {
      blockIndex: blockchain.chain.length,
      data,
      hash,
      previousHash,
      timestamp,
      nonce: Math.floor(Math.random() * 1000000),
      merkleRoot: crypto.createHash('sha256').update(JSON.stringify(data)).digest('hex')
    };
    
    // Th√™m block v√†o chain
    blockchain.chain.push(newBlock);
    
    // L∆∞u blockchain
    const saved = writeBlockchain(blockchain);
    
    if (!saved) {
      throw new Error('Kh√¥ng th·ªÉ l∆∞u blockchain');
    }
    
    console.log('‚úÖ L∆∞u blockchain th√†nh c√¥ng');
    
    return {
      success: true,
      txId: hash,
      timestamp: data.timestamp,
      blockIndex: newBlock.blockIndex,
      merkleRoot: newBlock.merkleRoot
    };
  } catch (error) {
    console.error(`‚ùå L·ªói l∆∞u k·∫øt qu·∫£ l√™n blockchain: ${error}`);
    throw error;
  }
}

// L·∫•y k·∫øt qu·∫£ b√†i thi t·ª´ blockchain theo txId - FIXED
async function getSubmissionFromBlockchain(txId) {
  try {
    console.log(`üîç T√¨m submission v·ªõi txId: ${txId}`);
    
    const blockchain = readBlockchain();
    
    // T√¨m block v·ªõi hash t∆∞∆°ng ·ª©ng
    const block = blockchain.chain.find(block => block.hash === txId);
    
    if (!block) {
      console.log(`‚ùå Kh√¥ng t√¨m th·∫•y block v·ªõi hash: ${txId}`);
      return null;
    }
    
    console.log(`‚úÖ T√¨m th·∫•y block v·ªõi hash: ${txId}`);
    return {
      ...block.data,
      hash: block.hash,
      timestamp: block.timestamp,
      blockIndex: block.blockIndex,
      previousHash: block.previousHash,
      merkleRoot: block.merkleRoot,
      verified: true
    };
  } catch (error) {
    console.error(`‚ùå L·ªói l·∫•y k·∫øt qu·∫£ t·ª´ blockchain: ${error}`);
    return null;
  }
}

// L·∫•y b√†i n·ªôp theo submissionId - TH√äM FUNCTION N√ÄY
async function getSubmissionById(submissionId) {
  try {
    console.log(`üîç T√¨m submission v·ªõi ID: ${submissionId}`);
    
    const blockchain = readBlockchain();
    
    // T√¨m block ch·ª©a submission
    const block = blockchain.chain.find(block => 
      block.data && block.data.submissionId === submissionId
    );
    
    if (!block) {
      console.log(`‚ùå Kh√¥ng t√¨m th·∫•y b√†i n·ªôp v·ªõi ID: ${submissionId}`);
      return null;
    }
    
    console.log(`‚úÖ T√¨m th·∫•y submission v·ªõi ID: ${submissionId}`);
    return {
      ...block.data,
      hash: block.hash,
      timestamp: block.timestamp,
      blockIndex: block.blockIndex,
      previousHash: block.previousHash,
      merkleRoot: block.merkleRoot
    };
  } catch (error) {
    console.error(`‚ùå L·ªói l·∫•y k·∫øt qu·∫£ t·ª´ blockchain: ${error}`);
    return null;
  }
}

// L·∫•y t·∫•t c·∫£ b√†i n·ªôp c·ªßa m·ªôt h·ªçc sinh t·ª´ blockchain - TH√äM FUNCTION N√ÄY
async function getSubmissionsByStudent(studentId) {
  try {
    console.log(`üîç T√¨m submissions c·ªßa h·ªçc sinh: ${studentId}`);
    
    const blockchain = readBlockchain();
    
    const studentSubmissions = blockchain.chain
      .filter(block => block.data && block.data.studentId === studentId)
      .map(block => ({
        ...block.data,
        hash: block.hash,
        timestamp: block.timestamp,
        blockIndex: block.blockIndex,
        merkleRoot: block.merkleRoot
      }))
      .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
    
    console.log(`‚úÖ T√¨m th·∫•y ${studentSubmissions.length} submissions c·ªßa h·ªçc sinh ${studentId}`);
    return studentSubmissions;
  } catch (error) {
    console.error(`‚ùå L·ªói l·∫•y b√†i n·ªôp c·ªßa h·ªçc sinh: ${error}`);
    return [];
  }
}

// L·∫•y t·∫•t c·∫£ b√†i n·ªôp c·ªßa m·ªôt k·ª≥ thi t·ª´ blockchain - TH√äM FUNCTION N√ÄY
async function getSubmissionsByExam(examId) {
  try {
    console.log(`üîç T√¨m submissions c·ªßa k·ª≥ thi: ${examId}`);
    
    const blockchain = readBlockchain();
    
    const examSubmissions = blockchain.chain
      .filter(block => block.data && block.data.examId === examId)
      .map(block => ({
        ...block.data,
        hash: block.hash,
        timestamp: block.timestamp,
        blockIndex: block.blockIndex,
        merkleRoot: block.merkleRoot
      }))
      .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
    
    console.log(`‚úÖ T√¨m th·∫•y ${examSubmissions.length} submissions c·ªßa k·ª≥ thi ${examId}`);
    return examSubmissions;
  } catch (error) {
    console.error(`‚ùå L·ªói l·∫•y b√†i n·ªôp c·ªßa k·ª≥ thi: ${error}`);
    return [];
  }
}

// X√°c minh t√≠nh to√†n v·∫πn c·ªßa blockchain - FIXED
function verifyBlockchain() {
  try {
    console.log('üîç B·∫Øt ƒë·∫ßu x√°c minh blockchain...');
    
    const blockchain = readBlockchain();
    
    if (!blockchain || !blockchain.chain) {
      console.log('‚ö†Ô∏è  Blockchain r·ªóng ho·∫∑c kh√¥ng h·ª£p l·ªá');
      return {
        valid: true,
        message: 'Blockchain r·ªóng - h·ª£p l·ªá',
        blockCount: 0,
        details: [],
        error: null
      };
    }

    if (blockchain.chain.length === 0) {
      console.log('‚úÖ Blockchain r·ªóng - h·ª£p l·ªá');
      return {
        valid: true,
        message: 'Blockchain r·ªóng - h·ª£p l·ªá',
        blockCount: 0,
        details: [],
        error: null
      };
    }
    
    const details = [];
    let isValid = true;
    
    // Ki·ªÉm tra t·ª´ng block trong chain
    for (let i = 0; i < blockchain.chain.length; i++) {
      const currentBlock = blockchain.chain[i];
      const blockDetails = {
        blockIndex: i,
        hash: currentBlock.hash,
        valid: true,
        issues: []
      };
      
      try {
        // Ki·ªÉm tra c·∫•u tr√∫c block c∆° b·∫£n
        if (!currentBlock.data || !currentBlock.hash || !currentBlock.timestamp) {
          blockDetails.valid = false;
          blockDetails.issues.push('Block thi·∫øu d·ªØ li·ªáu c·∫ßn thi·∫øt');
          isValid = false;
        }
        
        // Ki·ªÉm tra block ƒë·∫ßu ti√™n
        if (i === 0) {
          if (currentBlock.previousHash !== '0') {
            blockDetails.valid = false;
            blockDetails.issues.push('Block ƒë·∫ßu ti√™n ph·∫£i c√≥ previousHash = "0"');
            isValid = false;
          }
        } else {
          const previousBlock = blockchain.chain[i - 1];
          
          // Ki·ªÉm tra hash c·ªßa block tr∆∞·ªõc
          if (currentBlock.previousHash !== previousBlock.hash) {
            blockDetails.valid = false;
            blockDetails.issues.push('previousHash kh√¥ng kh·ªõp v·ªõi hash c·ªßa block tr∆∞·ªõc');
            isValid = false;
          }
        }
        
        // Ki·ªÉm tra hash h·ª£p l·ªá
        if (!currentBlock.hash || currentBlock.hash.length !== 64) {
          blockDetails.valid = false;
          blockDetails.issues.push('Hash kh√¥ng h·ª£p l·ªá');
          isValid = false;
        }
        
        // Ki·ªÉm tra blockIndex
        if (currentBlock.blockIndex !== undefined && currentBlock.blockIndex !== i) {
          blockDetails.valid = false;
          blockDetails.issues.push(`blockIndex kh√¥ng ƒë√∫ng: expected ${i}, got ${currentBlock.blockIndex}`);
          isValid = false;
        }
        
      } catch (blockError) {
        console.error(`‚ùå L·ªói ki·ªÉm tra block ${i}:`, blockError);
        blockDetails.valid = false;
        blockDetails.issues.push(`L·ªói ki·ªÉm tra: ${blockError.message}`);
        isValid = false;
      }
      
      details.push(blockDetails);
    }
    
    const result = {
      valid: isValid,
      message: isValid ? 'Blockchain h·ª£p l·ªá' : 'Blockchain c√≥ l·ªói',
      blockCount: blockchain.chain.length,
      details,
      metadata: blockchain.metadata,
      firstBlock: blockchain.chain[0]?.timestamp,
      lastBlock: blockchain.chain[blockchain.chain.length - 1]?.timestamp,
      error: null
    };
    
    console.log(`‚úÖ X√°c minh ho√†n t·∫•t: ${isValid ? 'H·ª¢P L·ªÜ' : 'C√ì L·ªñI'}`);
    return result;
    
  } catch (error) {
    console.error('‚ùå L·ªói x√°c minh blockchain:', error);
    return {
      valid: false,
      message: `L·ªói x√°c minh: ${error.message}`,
      blockCount: 0,
      details: [],
      error: error.message
    };
  }
}

// So s√°nh d·ªØ li·ªáu submission v·ªõi blockchain - FIXED
async function compareSubmissionWithBlockchain(submission) {
  try {
    console.log(`üîç So s√°nh submission ${submission._id} v·ªõi blockchain...`);
    
    if (!submission.blockchainTxId) {
      return {
        status: 'no_blockchain_data',
        message: 'B√†i n·ªôp kh√¥ng c√≥ d·ªØ li·ªáu blockchain',
        consistent: false,
        discrepancies: [],
        error: null
      };
    }
    
    const blockchainData = await getSubmissionFromBlockchain(submission.blockchainTxId);
    
    if (!blockchainData) {
      return {
        status: 'blockchain_not_found',
        message: 'Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu tr√™n blockchain',
        consistent: false,
        discrepancies: [],
        error: null
      };
    }
    
    // So s√°nh c√°c tr∆∞·ªùng quan tr·ªçng
    const discrepancies = [];
    
    try {
      if (submission._id.toString() !== blockchainData.submissionId) {
        discrepancies.push({
          field: 'submissionId',
          database: submission._id.toString(),
          blockchain: blockchainData.submissionId
        });
      }
      
      if (Math.abs(submission.score - parseFloat(blockchainData.score)) > 0.01) {
        discrepancies.push({
          field: 'score',
          database: submission.score,
          blockchain: parseFloat(blockchainData.score)
        });
      }
      
      if (submission.correctAnswers !== blockchainData.correctAnswers) {
        discrepancies.push({
          field: 'correctAnswers',
          database: submission.correctAnswers,
          blockchain: blockchainData.correctAnswers
        });
      }
      
      if (submission.totalQuestions !== blockchainData.totalQuestions) {
        discrepancies.push({
          field: 'totalQuestions',
          database: submission.totalQuestions,
          blockchain: blockchainData.totalQuestions
        });
      }
      
      // So s√°nh answers
      if (submission.answers && blockchainData.answers) {
        if (submission.answers.length !== blockchainData.answers.length) {
          discrepancies.push({
            field: 'answers_length',
            database: submission.answers.length,
            blockchain: blockchainData.answers.length
          });
        } else {
          // So s√°nh t·ª´ng c√¢u tr·∫£ l·ªùi
          for (let i = 0; i < submission.answers.length; i++) {
            const dbAnswer = submission.answers[i];
            const bcAnswer = blockchainData.answers[i];
            
            if (dbAnswer.selectedOption !== bcAnswer.selectedOption) {
              discrepancies.push({
                field: `answer_${i}_selectedOption`,
                database: dbAnswer.selectedOption,
                blockchain: bcAnswer.selectedOption
              });
            }
            
            if (dbAnswer.isCorrect !== bcAnswer.isCorrect) {
              discrepancies.push({
                field: `answer_${i}_isCorrect`,
                database: dbAnswer.isCorrect,
                blockchain: bcAnswer.isCorrect
              });
            }
          }
        }
      }
    } catch (compareError) {
      console.error('‚ùå L·ªói so s√°nh d·ªØ li·ªáu:', compareError);
      return {
        status: 'error',
        message: `L·ªói so s√°nh: ${compareError.message}`,
        consistent: false,
        discrepancies: [],
        error: compareError.message
      };
    }
    
    const isConsistent = discrepancies.length === 0;
    
    const result = {
      status: isConsistent ? 'consistent' : 'inconsistent',
      message: isConsistent ? 
        'D·ªØ li·ªáu nh·∫•t qu√°n gi·ªØa database v√† blockchain' : 
        `Ph√°t hi·ªán ${discrepancies.length} s·ª± kh√¥ng nh·∫•t qu√°n`,
      consistent: isConsistent,
      discrepancies,
      blockchainHash: blockchainData.hash,
      blockchainTimestamp: blockchainData.timestamp,
      blockchainIndex: blockchainData.blockIndex,
      merkleRoot: blockchainData.merkleRoot,
      error: null
    };
    
    console.log(`‚úÖ So s√°nh ho√†n t·∫•t: ${isConsistent ? 'NH·∫§T QU√ÅN' : 'KH√îNG NH·∫§T QU√ÅN'}`);
    return result;
    
  } catch (error) {
    console.error('‚ùå L·ªói so s√°nh d·ªØ li·ªáu:', error);
    return {
      status: 'error',
      message: `L·ªói so s√°nh: ${error.message}`,
      consistent: false,
      discrepancies: [],
      error: error.message
    };
  }
}

// L·∫•y th·ªëng k√™ blockchain - FIXED
function getBlockchainStats() {
  try {
    console.log('üìä L·∫•y th·ªëng k√™ blockchain...');
    
    const blockchain = readBlockchain();
    const blocks = blockchain.chain || [];
    
    if (blocks.length === 0) {
      console.log('üìä Blockchain r·ªóng, tr·∫£ v·ªÅ stats m·∫∑c ƒë·ªãnh');
      return {
        totalBlocks: 0,
        totalSubmissions: 0,
        uniqueStudents: 0,
        uniqueExams: 0,
        averageScore: 0,
        highestScore: 0,
        lowestScore: 0,
        createdAt: null,
        lastUpdated: null,
        totalStorage: '0 KB',
        metadata: blockchain.metadata || {}
      };
    }
    
    const students = new Set();
    const exams = new Set();
    const scores = [];
    let totalCorrectAnswers = 0;
    let totalQuestions = 0;
    
    blocks.forEach(block => {
      try {
        if (block.data) {
          students.add(block.data.studentId);
          exams.add(block.data.examId);
          const score = parseFloat(block.data.score);
          if (!isNaN(score)) {
            scores.push(score);
          }
          
          if (block.data.correctAnswers) {
            totalCorrectAnswers += block.data.correctAnswers;
          }
          if (block.data.totalQuestions) {
            totalQuestions += block.data.totalQuestions;
          }
        }
      } catch (blockError) {
        console.error('‚ùå L·ªói x·ª≠ l√Ω block:', blockError);
      }
    });
    
    // T√≠nh k√≠ch th∆∞·ªõc file
    let fileSize = 0;
    try {
      const stats = fs.statSync(BLOCKCHAIN_FILE);
      fileSize = stats.size;
    } catch (e) {
      fileSize = 0;
    }
    
    const result = {
      totalBlocks: blocks.length,
      totalSubmissions: blocks.length,
      uniqueStudents: students.size,
      uniqueExams: exams.size,
      averageScore: scores.length > 0 ? (scores.reduce((a, b) => a + b, 0) / scores.length).toFixed(2) : 0,
      highestScore: scores.length > 0 ? Math.max(...scores).toFixed(2) : 0,
      lowestScore: scores.length > 0 ? Math.min(...scores).toFixed(2) : 0,
      totalCorrectAnswers,
      totalQuestions,
      accuracyRate: totalQuestions > 0 ? ((totalCorrectAnswers / totalQuestions) * 100).toFixed(2) : 0,
      createdAt: blocks[0]?.timestamp,
      lastUpdated: blocks[blocks.length - 1]?.timestamp,
      totalStorage: `${(fileSize / 1024).toFixed(2)} KB`,
      metadata: blockchain.metadata || {}
    };
    
    console.log('‚úÖ Th·ªëng k√™ blockchain ho√†n t·∫•t');
    return result;
    
  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y th·ªëng k√™ blockchain:', error);
    return {
      totalBlocks: 0,
      totalSubmissions: 0,
      uniqueStudents: 0,
      uniqueExams: 0,
      averageScore: 0,
      highestScore: 0,
      lowestScore: 0,
      totalCorrectAnswers: 0,
      totalQuestions: 0,
      accuracyRate: 0,
      createdAt: null,
      lastUpdated: null,
      totalStorage: '0 KB',
      metadata: {},
      error: error.message
    };
  }
}

// T√¨m ki·∫øm trong blockchain - FIXED
async function searchBlockchain(criteria) {
  try {
    console.log('üîç T√¨m ki·∫øm blockchain v·ªõi criteria:', criteria);
    
    const blockchain = readBlockchain();
    let results = [...blockchain.chain];
    
    // L·ªçc theo h·ªçc sinh
    if (criteria.studentId) {
      results = results.filter(block => 
        block.data && block.data.studentId === criteria.studentId
      );
    }
    
    // L·ªçc theo k·ª≥ thi
    if (criteria.examId) {
      results = results.filter(block => 
        block.data && block.data.examId === criteria.examId
      );
    }
    
    // L·ªçc theo ƒëi·ªÉm s·ªë
    if (criteria.minScore !== undefined) {
      results = results.filter(block => 
        block.data && parseFloat(block.data.score) >= criteria.minScore
      );
    }
    
    if (criteria.maxScore !== undefined) {
      results = results.filter(block => 
        block.data && parseFloat(block.data.score) <= criteria.maxScore
      );
    }
    
    // L·ªçc theo th·ªùi gian
    if (criteria.fromDate) {
      results = results.filter(block => 
        block.timestamp && new Date(block.timestamp) >= new Date(criteria.fromDate)
      );
    }
    
    if (criteria.toDate) {
      results = results.filter(block => 
        block.timestamp && new Date(block.timestamp) <= new Date(criteria.toDate)
      );
    }
    
    // S·∫Øp x·∫øp k·∫øt qu·∫£
    if (criteria.sortBy) {
      results.sort((a, b) => {
        switch (criteria.sortBy) {
          case 'score_asc':
            return parseFloat(a.data?.score || 0) - parseFloat(b.data?.score || 0);
          case 'score_desc':
            return parseFloat(b.data?.score || 0) - parseFloat(a.data?.score || 0);
          case 'time_asc':
            return new Date(a.timestamp) - new Date(b.timestamp);
          case 'time_desc':
            return new Date(b.timestamp) - new Date(a.timestamp);
          default:
            return 0;
        }
      });
    }
    
    const mappedResults = results.map(block => ({
      ...block.data,
      hash: block.hash,
      timestamp: block.timestamp,
      blockIndex: block.blockIndex,
      merkleRoot: block.merkleRoot
    }));
    
    console.log(`‚úÖ T√¨m ki·∫øm ho√†n t·∫•t, ${mappedResults.length} k·∫øt qu·∫£`);
    return mappedResults;
    
  } catch (error) {
    console.error('‚ùå L·ªói t√¨m ki·∫øm blockchain:', error);
    return [];
  }
}

// Backup blockchain
function backupBlockchain() {
  try {
    console.log('üíæ ƒêang backup blockchain...');
    
    ensureBlockchainFile();
    
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const backupFile = path.join(BLOCKCHAIN_BACKUP_DIR, `blockchain-backup-${timestamp}.json`);
    
    if (fs.existsSync(BLOCKCHAIN_FILE)) {
      fs.copyFileSync(BLOCKCHAIN_FILE, backupFile);
      console.log(`‚úÖ Blockchain ƒë√£ ƒë∆∞·ª£c backup t·∫°i: ${backupFile}`);
      return true;
    } else {
      console.log('‚ö†Ô∏è  File blockchain kh√¥ng t·ªìn t·∫°i ƒë·ªÉ backup');
      return false;
    }
  } catch (error) {
    console.error('‚ùå L·ªói backup blockchain:', error);
    return false;
  }
}

// Export t·∫•t c·∫£ functions - TH√äM C√ÅC FUNCTIONS THI·∫æU
module.exports = {
  submitExamToBlockchain,
  getSubmissionFromBlockchain,
  getSubmissionById,                    
  getSubmissionsByStudent,              
  getSubmissionsByExam,                 
  verifyBlockchain,
  compareSubmissionWithBlockchain,
  getBlockchainStats,
  searchBlockchain,
  backupBlockchain,
  readBlockchain,
  writeBlockchain,
  ensureBlockchainFile
};