// utils/autoSubmit.js - N√¢ng cao v·ªõi backup blockchain v√† x·ª≠ l√Ω t·ª± ƒë·ªông
const cron = require('node-cron');
const Submission = require('../models/Submission');
const Exam = require('../models/Exam');
const { 
  submitExamToBlockchain, 
  backupBlockchain,
  verifyBlockchain,
  compareSubmissionWithBlockchain 
} = require('./blockchain-simulator');

// T·ª± ƒë·ªông n·ªôp b√†i qu√° h·∫°n
async function autoSubmitExpiredExams() {
  try {
    console.log('üîÑ ƒêang ki·ªÉm tra c√°c b√†i thi qu√° h·∫°n...');
    
    // T√¨m c√°c submission ch∆∞a n·ªôp v√† ƒë√£ qu√° th·ªùi gian
    const expiredSubmissions = await Submission.find({
      submitted: false,
      startTime: { $exists: true }
    }).populate('exam').populate('student', 'studentId name');
    
    let autoSubmittedCount = 0;
    
    for (const submission of expiredSubmissions) {
      const exam = submission.exam;
      const startTime = new Date(submission.startTime);
      const endTime = new Date(startTime.getTime() + exam.duration * 60000); // duration in minutes
      const now = new Date();
      
      // Ki·ªÉm tra xem ƒë√£ qu√° h·∫°n ch∆∞a
      if (now > endTime) {
        console.log(`‚è∞ T·ª± ƒë·ªông n·ªôp b√†i cho sinh vi√™n ${submission.student.studentId} - K·ª≥ thi: ${exam.title}`);
        
        try {
          // T√≠nh ƒëi·ªÉm d·ª±a tr√™n c√°c c√¢u tr·∫£ l·ªùi hi·ªán c√≥
          let correctAnswers = 0;
          const processedAnswers = submission.answers.map(answer => {
            const question = exam.questions[answer.questionIndex];
            const isCorrect = question && question.correctAnswer === answer.selectedOption;
            
            if (isCorrect) {
              correctAnswers += 1;
            }
            
            return {
              questionIndex: answer.questionIndex,
              selectedOption: answer.selectedOption,
              isCorrect
            };
          });
          
          // ƒêi·ªÉm theo thang 10
          const score = exam.questions.length > 0 ? 
            (correctAnswers / exam.questions.length) * 10 : 0;
          
          // C·∫≠p nh·∫≠t submission
          submission.answers = processedAnswers;
          submission.score = score;
          submission.correctAnswers = correctAnswers;
          submission.totalQuestions = exam.questions.length;
          submission.endTime = now;
          submission.submitted = true;
          
          // L∆∞u l√™n blockchain
          const blockchainResult = await submitExamToBlockchain(
            submission._id.toString(),
            submission.student.studentId,
            exam._id.toString(),
            processedAnswers,
            correctAnswers,
            exam.questions.length,
            score
          );
          
          submission.blockchainTxId = blockchainResult.txId;
          
          await submission.save();
          
          autoSubmittedCount++;
          
          console.log(`‚úÖ ƒê√£ t·ª± ƒë·ªông n·ªôp b√†i cho ${submission.student.studentId} - ƒêi·ªÉm: ${score.toFixed(2)}`);
          
        } catch (error) {
          console.error(`‚ùå L·ªói t·ª± ƒë·ªông n·ªôp b√†i cho ${submission.student.studentId}:`, error);
        }
      }
    }
    
    if (autoSubmittedCount > 0) {
      console.log(`üìù ƒê√£ t·ª± ƒë·ªông n·ªôp ${autoSubmittedCount} b√†i thi qu√° h·∫°n`);
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh t·ª± ƒë·ªông n·ªôp b√†i:', error);
  }
}

// Backup blockchain ƒë·ªãnh k·ª≥
async function performBlockchainBackup() {
  try {
    console.log('üíæ ƒêang th·ª±c hi·ªán backup blockchain...');
    
    // Th·ª±c hi·ªán backup
    backupBlockchain();
    
    // X√°c minh t√≠nh to√†n v·∫πn sau backup
    const verification = verifyBlockchain();
    
    if (verification.valid) {
      console.log(`‚úÖ Backup blockchain th√†nh c√¥ng - ${verification.blockCount} blocks`);
    } else {
      console.error('‚ùå Ph√°t hi·ªán l·ªói blockchain sau backup:', verification.message);
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói backup blockchain:', error);
  }
}

// Ki·ªÉm tra t√≠nh nh·∫•t qu√°n d·ªØ li·ªáu
async function checkDataConsistency() {
  try {
    console.log('üîç ƒêang ki·ªÉm tra t√≠nh nh·∫•t qu√°n d·ªØ li·ªáu...');
    
    // L·∫•y t·∫•t c·∫£ submission ƒë√£ n·ªôp c√≥ blockchain data
    const submissions = await Submission.find({
      submitted: true,
      blockchainTxId: { $exists: true, $ne: null }
    }).limit(50).sort({ createdAt: -1 }); // Ki·ªÉm tra 50 b√†i g·∫ßn nh·∫•t
    
    let consistentCount = 0;
    let inconsistentCount = 0;
    const inconsistentSubmissions = [];
    
    for (const submission of submissions) {
      try {
        const verification = await compareSubmissionWithBlockchain(submission);
        
        if (verification.status === 'consistent') {
          consistentCount++;
        } else if (verification.status === 'inconsistent') {
          inconsistentCount++;
          inconsistentSubmissions.push({
            submissionId: submission._id,
            studentId: submission.student,
            discrepancies: verification.discrepancies
          });
        }
        
      } catch (error) {
        console.error(`L·ªói ki·ªÉm tra submission ${submission._id}:`, error);
      }
    }
    
    console.log(`üìä K·∫øt qu·∫£ ki·ªÉm tra: ${consistentCount} nh·∫•t qu√°n, ${inconsistentCount} kh√¥ng nh·∫•t qu√°n`);
    
    if (inconsistentCount > 0) {
      console.warn('‚ö†Ô∏è  Ph√°t hi·ªán d·ªØ li·ªáu kh√¥ng nh·∫•t qu√°n:', inconsistentSubmissions);
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói ki·ªÉm tra t√≠nh nh·∫•t qu√°n:', error);
  }
}

// D·ªçn d·∫πp c√°c session c≈©
async function cleanupOldSessions() {
  try {
    console.log('üßπ ƒêang d·ªçn d·∫πp c√°c session c≈©...');
    
    const threeDaysAgo = new Date(Date.now() - 3 * 24 * 60 * 60 * 1000);
    
    // X√≥a c√°c submission ch∆∞a ho√†n th√†nh v√† qu√° c≈©
    const result = await Submission.deleteMany({
      submitted: false,
      createdAt: { $lt: threeDaysAgo },
      answers: { $size: 0 } // Ch·ªâ x√≥a nh·ªØng b√†i kh√¥ng c√≥ c√¢u tr·∫£ l·ªùi n√†o
    });
    
    if (result.deletedCount > 0) {
      console.log(`üóëÔ∏è  ƒê√£ x√≥a ${result.deletedCount} session c≈©`);
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói d·ªçn d·∫πp session:', error);
  }
}

// Th·ªëng k√™ h·ªá th·ªëng
async function generateSystemStats() {
  try {
    const stats = {
      timestamp: new Date().toISOString(),
      submissions: {
        total: await Submission.countDocuments(),
        submitted: await Submission.countDocuments({ submitted: true }),
        pending: await Submission.countDocuments({ submitted: false }),
        withBlockchain: await Submission.countDocuments({ 
          blockchainTxId: { $exists: true, $ne: null } 
        })
      },
      exams: {
        total: await Exam.countDocuments(),
        active: await Exam.countDocuments({ 
          isActive: true,
          endTime: { $gte: new Date() }
        })
      }
    };
    
    // Ch·ªâ log stats v√†o l√∫c ƒë·∫ßu gi·ªù ƒë·ªÉ tr√°nh spam
    const now = new Date();
    if (now.getMinutes() === 0) {
      console.log('üìà Th·ªëng k√™ h·ªá th·ªëng:', JSON.stringify(stats, null, 2));
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói t·∫°o th·ªëng k√™:', error);
  }
}

// Kh·ªüi t·∫°o t·∫•t c·∫£ c√°c cronjob
function initAutoSubmitTask() {
  console.log('üöÄ Kh·ªüi t·∫°o c√°c t√°c v·ª• t·ª± ƒë·ªông...');
  
  // Ch·∫°y m·ªói ph√∫t - ki·ªÉm tra b√†i thi qu√° h·∫°n
  cron.schedule('* * * * *', async () => {
    await autoSubmitExpiredExams();
    await generateSystemStats();
  });
  
  // Ch·∫°y m·ªói 15 ph√∫t - ki·ªÉm tra t√≠nh nh·∫•t qu√°n
  cron.schedule('*/15 * * * *', async () => {
    await checkDataConsistency();
  });
  
  // Ch·∫°y m·ªói gi·ªù - backup blockchain
  cron.schedule('0 * * * *', async () => {
    await performBlockchainBackup();
  });
  
  // Ch·∫°y m·ªói ng√†y l√∫c 2:00 AM - d·ªçn d·∫πp
  cron.schedule('0 2 * * *', async () => {
    await cleanupOldSessions();
  });
  
  console.log('‚úÖ ƒê√£ kh·ªüi t·∫°o c√°c t√°c v·ª• t·ª± ƒë·ªông:');
  console.log('   - T·ª± ƒë·ªông n·ªôp b√†i: m·ªói ph√∫t');
  console.log('   - Ki·ªÉm tra nh·∫•t qu√°n: m·ªói 15 ph√∫t'); 
  console.log('   - Backup blockchain: m·ªói gi·ªù');
  console.log('   - D·ªçn d·∫πp d·ªØ li·ªáu: m·ªói ng√†y 2:00 AM');
}

// Export c√°c functions ƒë·ªÉ c√≥ th·ªÉ g·ªçi manually
module.exports = {
  initAutoSubmitTask,
  autoSubmitExpiredExams,
  performBlockchainBackup,
  checkDataConsistency,
  cleanupOldSessions,
  generateSystemStats
};